/*
 * <파일 설명>
 * 행렬의 덧셈과 뺄셈을 확인해보는 예제입니다.
 * 숫자에는 사칙연산(덧셈, 뺄셈, 곱셈, 나눗셈)이 존재하지만
 * 행렬에는 사칙연산이 전부 다 존재하지는 않습니다. 뭐가 없느냐? 나눗셈이 없어요.
 * 왜 나눗셈이 없는지는 곱셈 때 설명하기로 하고...
 * 여기서는 덧셈과 뺄셈만 알아볼게요.						   
 */

// double에서 float으로 축소되는 것 허용
#pragma warning(disable : 4305)

#include <conio.h>   // CMD 입출력을 다루기 위한 헤더(비표준)
#include <windows.h> // CMD 확장 기능을 이용하기 위한 헤더(비표준)
#include <cstdio>    // CMD 입출력을 다루기 위한 헤더(표준)
#include <cmath>     // 수학을 다루기 위한 헤더(표준)
#include <cfloat>    // 실수를 다루기 위한 헤더(표준)

// 행렬 구조체
struct MatrixBase4X4
{
	// 배열보다는 각 성분으로 표현하는 게 좋습니다.
	// 익숙해지면 상관없지만 따로 표현하는 게 눈에 더 잘 들어옵니다.
	float _00, _01, _02, _03;
	float _10, _11, _12, _13;
	float _20, _21, _22, _23;
	float _30, _31, _32, _33;
};

// 행렬 클래스
class Matrix4X4 : public MatrixBase4X4
{
public:
	// 초기화는 0으로 설정합니다.
	// 이런 행렬을 영행렬(Zero Matrix)이라 부릅니다.
	Matrix4X4()
	{
		_00 = 0.0f; _01 = 0.0f; _02 = 0.0f; _03 = 0.0f;
		_10 = 0.0f; _11 = 0.0f; _12 = 0.0f; _13 = 0.0f;
		_20 = 0.0f; _21 = 0.0f; _22 = 0.0f; _23 = 0.0f;
		_30 = 0.0f; _31 = 0.0f; _32 = 0.0f; _33 = 0.0f;
	}

	~Matrix4X4() = default;

	// 행렬의 덧셈입니다.
	void Add(const Matrix4X4& mat)
	{
		_00 += mat._00; _01 += mat._01; _02 += mat._02; _03 += mat._03;
		_10 += mat._10; _11 += mat._11; _12 += mat._12; _13 += mat._13;
		_20 += mat._20; _21 += mat._21; _22 += mat._22; _23 += mat._23;
		_30 += mat._30; _31 += mat._31; _32 += mat._32; _33 += mat._33;
	}

	// 행렬의 뺄셈입니다.
	void Subtract(const Matrix4X4& mat)
	{
		_00 -= mat._00; _01 -= mat._01; _02 -= mat._02; _03 -= mat._03;
		_10 -= mat._10; _11 -= mat._11; _12 -= mat._12; _13 -= mat._13;
		_20 -= mat._20; _21 -= mat._21; _22 -= mat._22; _23 -= mat._23;
		_30 -= mat._30; _31 -= mat._31; _32 -= mat._32; _33 -= mat._33;
	}

	void ShowMartixValue()
	{
		printf("%5.2f, %5.2f, %5.2f, %5.2f\n", _00, _01, _02, _03);
		printf("%5.2f, %5.2f, %5.2f, %5.2f\n", _10, _11, _12, _13);
		printf("%5.2f, %5.2f, %5.2f, %5.2f\n", _20, _21, _22, _23);
		printf("%5.2f, %5.2f, %5.2f, %5.2f\n", _30, _31, _32, _33);
	}
};

int main()
{
	Matrix4X4 mat1;
	mat1._00 = 1.0f; mat1._01 = 2.0f; mat1._02 = 3.0f; mat1._03 = 4.0f;
	mat1._10 = 5.0f; mat1._11 = 1.0f; mat1._12 = 2.0f; mat1._13 = 3.0f;
	mat1._20 = 6.0f; mat1._21 = 5.0f; mat1._22 = 1.0f; mat1._23 = 2.0f;
	mat1._30 = 7.0f; mat1._31 = 6.0f; mat1._32 = 5.0f; mat1._33 = 1.0f;

	Matrix4X4 mat2;
	mat2._00 = 1.0f; mat2._01 = 2.0f; mat2._02 = 3.0f; mat2._03 = 4.0f;
	mat2._10 = 5.0f; mat2._11 = 6.0f; mat2._12 = 7.0f; mat2._13 = 8.0f;
	mat2._20 = 9.0f; mat2._21 = 8.0f; mat2._22 = 7.0f; mat2._23 = 6.0f;
	mat2._30 = 2.0f; mat2._31 = 3.0f; mat2._32 = 4.0f; mat2._33 = 5.0f;

	printf("4행 4열의 행렬 덧셈입니다.\n");
	printf("----------------------------\n");
	mat1.Add(mat2);
	mat1.ShowMartixValue();
	printf("----------------------------\n\n");

	///////////////////////////////////////////////////////////////

	printf("4행 4열의 행렬 뺄셈입니다.\n");
	printf("----------------------------\n");
	mat1.Subtract(mat2);
	mat1.ShowMartixValue();
	printf("----------------------------\n\n");

	_getch();
	return 0;
}